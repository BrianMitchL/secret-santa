{"version":3,"sources":["form/ValidationError.tsx","people/PersonForm.tsx","people/People.tsx","matches/Pairs.tsx","matches/Matches.tsx","common/utils.ts","exclusions/Exclusions.tsx","exclusions/ExclusionForm.tsx","common/Section.tsx","Main.tsx","App.tsx","index.tsx"],"names":["ValidationError","children","className","PersonForm","usedNames","usedGroups","onSubmit","useForm","errors","handleSubmit","register","reset","data","name","group","undefined","htmlFor","id","type","ref","required","validate","value","includes","as","list","autoComplete","map","key","People","people","removePerson","groups","reduce","acc","person","find","item","push","p","onClick","Pairs","pairs","a","b","Matches","exclusions","React","setPairs","error","setError","calculateMatches","calculate","m","i","disabled","length","message","exclusionKey","exclusion","subject","excludedType","excludedSubject","ExclusionItem","removeHandler","Exclusions","removeExclusion","names","filter","e","ExclusionForm","usedExclusionKeys","watch","defaultChecked","Section","heading","isString","str","Main","setPeople","setExclusions","Set","prev","concat","prevPeople","prevExclusions","App","href","rel","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.56d7a743.chunk.js","sourcesContent":["import * as React from 'react';\n\ninterface Props {\n  children?: React.ReactNode;\n}\n\nexport function ValidationError({ children }: Props) {\n  return <span className=\"validation\">{children}</span>;\n}\n","import * as React from 'react';\nimport { SubmitHandler, useForm } from 'react-hook-form';\nimport '../form/form.css';\nimport { Person } from 'gift-exchange';\nimport { ErrorMessage } from '@hookform/error-message';\nimport { ValidationError } from '../form/ValidationError';\n\ntype FormValues = {\n  name: string;\n  group: string;\n};\n\ninterface Props {\n  usedNames: string[];\n  usedGroups: string[];\n  onSubmit: (person: Person) => void;\n}\n\nexport const PersonForm = ({ usedNames, usedGroups, onSubmit }: Props) => {\n  const { errors, handleSubmit, register, reset } = useForm();\n  const submitHandler: SubmitHandler<FormValues> = (data) => {\n    onSubmit({\n      name: data.name,\n      group: data.group === '' ? undefined : data.group,\n    });\n    reset();\n  };\n\n  return (\n    <form onSubmit={handleSubmit(submitHandler)}>\n      <fieldset>\n        <legend>Add a New Person</legend>\n        <label htmlFor=\"name\" className=\"label-required\">\n          Name\n        </label>\n        <input\n          id=\"name\"\n          name=\"name\"\n          type=\"text\"\n          ref={register({\n            required: 'A name is required',\n            validate: (value) =>\n              (value && !usedNames.includes(value)) ||\n              'The name must be unique',\n          })}\n        />\n        <ErrorMessage errors={errors} name=\"name\" as={ValidationError} />\n\n        <label htmlFor=\"group\">Group</label>\n        <input\n          id=\"group\"\n          name=\"group\"\n          type=\"text\"\n          list=\"groupOptions\"\n          autoComplete=\"off\"\n          ref={register}\n        />\n        <datalist id=\"groupOptions\">\n          {usedGroups.map((group) => (\n            <option key={group}>{group}</option>\n          ))}\n        </datalist>\n        <p className=\"meta\">\n          Use groups for simple exclusions to prevent people in the same group\n          from matching with each other.\n        </p>\n        <button type=\"submit\">Add Person</button>\n      </fieldset>\n    </form>\n  );\n};\n","import * as React from 'react';\nimport { Person } from 'gift-exchange';\n\n/*\n we need to key on something when rendering the list of groups,\n hopefully no user will ever enter this GUID...\n*/\nconst UNDEFINED_GROUP = 'fba449b5-deb3-400c-991c-4bac2bb1ad33';\n\ninterface PeopleListProps {\n  people: Person[];\n  removePerson: (person: Person) => void;\n}\n\nexport function People({ people, removePerson }: PeopleListProps) {\n  const groups = people.reduce<\n    Array<{\n      group: string | null;\n      people: Person[];\n    }>\n  >((acc, person) => {\n    const group = acc.find((item) => item.group === (person.group ?? null));\n    if (group) {\n      group.people.push(person);\n    } else {\n      acc.push({\n        group: person.group ?? null,\n        people: [person],\n      });\n    }\n    return acc;\n  }, []);\n\n  return (\n    <dl>\n      {groups.map((group) => (\n        <React.Fragment key={group.group ?? UNDEFINED_GROUP}>\n          <dt>\n            {group.group === null ? <strong>No Group</strong> : group.group}\n          </dt>\n          {group.people.map((p) => (\n            <dd key={p.name}>\n              {p.name} <button onClick={() => removePerson(p)}>Remove</button>\n            </dd>\n          ))}\n        </React.Fragment>\n      ))}\n    </dl>\n  );\n}\n","import * as React from 'react';\nimport { Person } from 'gift-exchange';\n\ninterface Props {\n  pairs: [Person, Person][];\n}\n\nexport function Pairs({ pairs }: Props) {\n  return (\n    <table>\n      <caption>Secret Santa Matches</caption>\n      <thead>\n        <tr>\n          <th>Giver</th>\n          <th>Receiver</th>\n        </tr>\n      </thead>\n      <tbody>\n        {pairs.map(([a, b]) => (\n          <tr key={a.name}>\n            <td>\n              {a.name}\n              {a.group && ` ${a.group}`}\n            </td>\n            <td>\n              {b.name}\n              {b.group && ` ${b.group}`}\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n","import * as React from 'react';\nimport { calculate, Exclusion, Person } from 'gift-exchange';\nimport { Pairs } from './Pairs';\n\ninterface Props {\n  people: Person[];\n  exclusions: Exclusion[];\n}\n\nexport function Matches({ people, exclusions }: Props) {\n  const [pairs, setPairs] = React.useState<[Person, Person][]>([]);\n  const [error, setError] = React.useState<null | Error>(null);\n\n  // needs to be a layout effect to prevent flashing when changing people\n  React.useLayoutEffect(() => {\n    setPairs([]);\n  }, [people, exclusions]);\n\n  const calculateMatches = async () => {\n    try {\n      const m = await calculate(people, exclusions);\n      setPairs(m.map((p, i) => [people[i], p]));\n    } catch (e) {\n      setError(e);\n      setPairs([]);\n    }\n  };\n\n  return (\n    <>\n      <button\n        onClick={() => {\n          setError(null);\n          calculateMatches();\n        }}\n        type=\"button\"\n        disabled={people.length < 1}\n      >\n        Match\n      </button>\n      {!error && pairs.length > 0 && <Pairs pairs={pairs} />}\n      {error && error.message}\n    </>\n  );\n}\n","import { Exclusion } from 'gift-exchange';\n\nexport const exclusionKey = (exclusion: Exclusion) =>\n  exclusion.type +\n  exclusion.subject +\n  exclusion.excludedType +\n  exclusion.excludedSubject;\n","import * as React from 'react';\nimport { EnhancedExclusion } from '../Main';\n\ninterface Props {\n  exclusions: EnhancedExclusion[];\n  removeExclusion: (exclusionKey: EnhancedExclusion['key']) => void;\n}\n\ninterface ExclusionItemProps {\n  exclusion: EnhancedExclusion;\n  removeHandler: () => void;\n}\n\nconst ExclusionItem = ({ exclusion, removeHandler }: ExclusionItemProps) => (\n  <dd>\n    <strong>{exclusion.subject}</strong> cannot give to{' '}\n    {exclusion.excludedType === 'group' && 'group '}\n    <strong>{exclusion.excludedSubject}</strong>{' '}\n    <button onClick={removeHandler}>Remove</button>\n  </dd>\n);\n\nexport function Exclusions({ exclusions, removeExclusion }: Props) {\n  const names = exclusions.filter((e) => e.type === 'name');\n  const groups = exclusions.filter((e) => e.type === 'group');\n\n  return (\n    <dl>\n      {names.length > 0 && <dt>Person</dt>}\n      {names.map((e) => (\n        <ExclusionItem\n          key={e.key}\n          exclusion={e}\n          removeHandler={() => removeExclusion(e.key)}\n        />\n      ))}\n      {groups.length > 0 && <dt>Group</dt>}\n      {groups.map((e) => (\n        <ExclusionItem\n          key={e.key}\n          exclusion={e}\n          removeHandler={() => removeExclusion(e.key)}\n        />\n      ))}\n    </dl>\n  );\n}\n","import * as React from 'react';\nimport { SubmitHandler, useForm } from 'react-hook-form';\nimport '../form/form.css';\nimport { Exclusion } from 'gift-exchange';\nimport { exclusionKey } from '../common/utils';\nimport { ErrorMessage } from '@hookform/error-message';\nimport { ValidationError } from '../form/ValidationError';\n\ntype FormValues = Exclusion;\n\ninterface Props {\n  usedNames: string[];\n  usedGroups: string[];\n  usedExclusionKeys: string[];\n  onSubmit: (exclusion: Exclusion) => void;\n}\n\nexport const ExclusionForm = ({\n  usedNames,\n  usedGroups,\n  usedExclusionKeys,\n  onSubmit,\n}: Props) => {\n  const { errors, handleSubmit, register, reset, setError, watch } = useForm();\n  const submitHandler: SubmitHandler<FormValues> = (data) => {\n    if (usedExclusionKeys.includes(exclusionKey(data))) {\n      setError('excludedSubject', { message: 'This exclusion already exists' });\n      return;\n    }\n    onSubmit(data);\n    reset();\n  };\n\n  const type = watch('type', 'name');\n  const excludedType = watch('excludedType', 'name');\n\n  return (\n    <form onSubmit={handleSubmit(submitHandler)}>\n      <p>A Source will not be matched with the Excluded.</p>\n      <fieldset>\n        <legend>Source</legend>\n        <label>\n          <input\n            type=\"radio\"\n            name=\"type\"\n            value=\"name\"\n            defaultChecked\n            ref={register({\n              required: 'A type is required',\n            })}\n          />{' '}\n          Name\n        </label>\n        <label>\n          <input\n            type=\"radio\"\n            name=\"type\"\n            value=\"group\"\n            ref={register({\n              required: 'A type is required',\n            })}\n          />{' '}\n          Group\n        </label>\n        <ErrorMessage errors={errors} name=\"type\" as={ValidationError} />\n\n        <label htmlFor=\"subject\">Subject</label>\n        <select\n          id=\"subject\"\n          name=\"subject\"\n          disabled={(type === 'name' ? usedNames : usedGroups).length < 1}\n          ref={register({\n            required: `A ${type} is required`,\n            validate: (value) =>\n              type === 'name'\n                ? usedNames.includes(value)\n                : usedGroups.includes(value),\n          })}\n        >\n          {(type === 'name' ? usedNames : usedGroups).map((item) => (\n            <option key={item}>{item}</option>\n          ))}\n        </select>\n        <ErrorMessage errors={errors} name=\"subject\" as={ValidationError} />\n      </fieldset>\n      <fieldset>\n        <legend>Excluded</legend>\n        <label>\n          <input\n            type=\"radio\"\n            name=\"excludedType\"\n            value=\"name\"\n            defaultChecked\n            ref={register({\n              required: 'A type is required',\n            })}\n          />{' '}\n          Name\n        </label>\n        <label>\n          <input\n            type=\"radio\"\n            name=\"excludedType\"\n            value=\"group\"\n            ref={register({\n              required: 'A type is required',\n            })}\n          />{' '}\n          Group\n        </label>\n        <ErrorMessage\n          errors={errors}\n          name=\"excludedType\"\n          as={ValidationError}\n        />\n\n        <label htmlFor=\"excludedSubject\">Subject</label>\n        <select\n          id=\"excludedSubject\"\n          name=\"excludedSubject\"\n          disabled={\n            (excludedType === 'name' ? usedNames : usedGroups).length < 1\n          }\n          ref={register({\n            required: `A ${excludedType} is required`,\n            validate: (value) =>\n              excludedType === 'name'\n                ? usedNames.includes(value)\n                : usedGroups.includes(value),\n          })}\n        >\n          {(excludedType === 'name' ? usedNames : usedGroups).map((item) => (\n            <option key={item}>{item}</option>\n          ))}\n        </select>\n        <ErrorMessage\n          errors={errors}\n          name=\"excludedSubject\"\n          as={ValidationError}\n        />\n      </fieldset>\n      <button type=\"submit\">Add Exclusion</button>\n    </form>\n  );\n};\n","import * as React from 'react';\n\ninterface Props {\n  children?: React.ReactNode;\n  heading: string;\n}\n\nexport function Section({ children, heading }: Props) {\n  return (\n    <section>\n      <h2>{heading}</h2>\n      {children}\n    </section>\n  );\n}\n","import * as React from 'react';\nimport { PersonForm } from './people/PersonForm';\nimport { People } from './people/People';\nimport { Exclusion, Person } from 'gift-exchange';\nimport { Matches } from './matches/Matches';\nimport { exclusionKey } from './common/utils';\nimport { Exclusions } from './exclusions/Exclusions';\nimport { ExclusionForm } from './exclusions/ExclusionForm';\nimport { Section } from './common/Section';\n\nexport interface EnhancedExclusion extends Exclusion {\n  key: string;\n}\n\nconst isString = (str: unknown): str is string => typeof str === 'string';\n\nexport function Main() {\n  const [people, setPeople] = React.useState<Person[]>([]);\n  const [exclusions, setExclusions] = React.useState<EnhancedExclusion[]>([]);\n\n  const usedNames = React.useMemo(() => people.map((p) => p.name), [people]);\n  const usedGroups = React.useMemo(\n    () => [...new Set(people.map((p) => p.group).filter(isString))],\n    [people]\n  );\n  const usedExclusionKeys = React.useMemo(() => exclusions.map((e) => e.key), [\n    exclusions,\n  ]);\n\n  const addPerson = (person: Person) => {\n    setPeople((prev) => prev.concat(person));\n  };\n\n  const removePerson = (person: Person) => {\n    setPeople((prevPeople) => prevPeople.filter((p) => p.name !== person.name));\n  };\n\n  const addExclusion = (exclusion: Exclusion) => {\n    setExclusions((prevExclusions) =>\n      prevExclusions.concat({ ...exclusion, key: exclusionKey(exclusion) })\n    );\n  };\n\n  const removeExclusion = (exclusionKey: string) => {\n    setExclusions((prevExclusions) =>\n      prevExclusions.filter((p) => p.key !== exclusionKey)\n    );\n  };\n\n  return (\n    <main>\n      <Section heading=\"People\">\n        <PersonForm\n          usedNames={usedNames}\n          usedGroups={usedGroups}\n          onSubmit={addPerson}\n        />\n        <People people={people} removePerson={removePerson} />\n      </Section>\n      <Section heading=\"Exclusions\">\n        <ExclusionForm\n          usedNames={usedNames}\n          usedGroups={usedGroups}\n          usedExclusionKeys={usedExclusionKeys}\n          onSubmit={addExclusion}\n        />\n        <Exclusions exclusions={exclusions} removeExclusion={removeExclusion} />\n      </Section>\n      <Section heading=\"Matches\">\n        <Matches people={people} exclusions={exclusions} />\n      </Section>\n    </main>\n  );\n}\n","import * as React from 'react';\nimport { Main } from './Main';\n\nfunction App() {\n  return (\n    <>\n      <header>\n        <h1>Secret Santa</h1>\n        <p>\n          By{' '}\n          <a href=\"https://brianm.me\" rel=\"noopener noreferrer\">\n            Brian Mitchell\n          </a>\n        </p>\n      </header>\n      <Main />\n    </>\n  );\n}\n\nexport default App;\n","import * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport '@exampledev/new.css';\nimport 'typeface-inter';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}