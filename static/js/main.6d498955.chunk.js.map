{"version":3,"sources":["form/input-field.tsx","form/select-input-field.tsx","form/person-form.tsx","people-list.tsx","pairs.tsx","matches.tsx","App.tsx","index.tsx"],"names":["InputField","React","forwardRef","props","ref","splitFormProps","field","fieldOptions","rest","useField","meta","error","isTouched","isValidating","getInputProps","id","SelectInputField","options","newGroupInputRef","useRef","value","setValue","useState","inputValue","setInputValue","useEffect","includes","current","focus","showInput","onChange","e","target","map","opt","key","type","aria-label","defaultValues","name","group","isString","str","PersonForm","people","onSubmit","usedNames","useMemo","p","usedGroups","Set","filter","nameInput","instance","useForm","values","reset","Form","canSubmit","isSubmitted","getFieldMeta","nameField","htmlFor","validate","required","disabled","UNDEFINED_GROUP","PeopleList","removePerson","groups","reduce","acc","person","find","item","push","onClick","Pairs","pairs","className","pair","Matches","setPairs","setError","useLayoutEffect","calculateMatches","a","calculate","m","i","length","message","App","setPeople","prev","concat","prevPeople","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6d498955.chunk.js","sourcesContent":["import React, { HTMLProps, RefForwardingComponent } from 'react';\nimport { FieldProps, splitFormProps, useField } from 'react-form';\n\nexport const InputField: RefForwardingComponent<\n  HTMLInputElement,\n  FieldProps & HTMLProps<HTMLInputElement>\n> = React.forwardRef((props, ref) => {\n  const [field, fieldOptions, rest] = splitFormProps(props);\n\n  const {\n    meta: { error, isTouched, isValidating },\n    getInputProps\n  } = useField(field, fieldOptions);\n\n  return (\n    <>\n      <input id={field} {...getInputProps({ ref, ...rest })} />\n      {isValidating ? (\n        <em>Validating...</em>\n      ) : isTouched && error ? (\n        <em>{error}</em>\n      ) : null}\n    </>\n  );\n});\n","import React, {\n  ChangeEventHandler,\n  FC,\n  HTMLProps,\n  useEffect,\n  useRef,\n  useState\n} from 'react';\nimport { FieldProps, splitFormProps, useField } from 'react-form';\n\nexport const SelectInputField: FC<\n  FieldProps & HTMLProps<HTMLSelectElement> & { options: string[] }\n> = props => {\n  const [field, fieldOptions, { options, ...rest }] = splitFormProps(props);\n\n  const newGroupInputRef = useRef<HTMLInputElement | null>(null);\n\n  const {\n    value = '',\n    setValue,\n    meta: { error, isTouched, isValidating }\n  } = useField(field, fieldOptions);\n\n  const [inputValue, setInputValue] = useState('');\n\n  const handleSelectChange: ChangeEventHandler<HTMLSelectElement> = e => {\n    setValue(e.target.value);\n  };\n  const handleInputChange: ChangeEventHandler<HTMLInputElement> = e => {\n    setInputValue(e.target.value);\n    setValue(e.target.value);\n  };\n\n  useEffect(() => {\n    if (value === '') {\n      setInputValue('');\n    }\n  }, [value]);\n\n  useEffect(() => {\n    if (value !== '' && !options.includes(value) && newGroupInputRef.current) {\n      newGroupInputRef.current.focus();\n    }\n  }, [options, value]);\n\n  const showInput = !options.includes(value) || inputValue !== '';\n\n  return (\n    <>\n      <select id={field} value={value} onChange={handleSelectChange} {...rest}>\n        <option>Create New</option>\n        {options.map(opt => (\n          <option key={opt} value={opt}>\n            {opt}\n          </option>\n        ))}\n      </select>\n      {showInput && (\n        <input\n          type=\"text\"\n          aria-label=\"New group name\"\n          value={inputValue}\n          onChange={handleInputChange}\n          ref={newGroupInputRef}\n        />\n      )}\n      {isValidating ? (\n        <em>Validating...</em>\n      ) : isTouched && error ? (\n        <em>{error}</em>\n      ) : null}\n    </>\n  );\n};\n","import React, { FC, useEffect, useMemo, useRef } from 'react';\nimport { useForm } from 'react-form';\nimport './form.css';\nimport { Person } from 'gift-exchange';\nimport { InputField } from './input-field';\nimport { SelectInputField } from './select-input-field';\n\ntype FormValues = {\n  name: string;\n  group: string;\n};\n\nconst defaultValues: FormValues = {\n  name: '',\n  group: ''\n};\n\ninterface Props {\n  people: Person[];\n  onSubmit: (person: Person) => void;\n}\n\nconst isString = (str: unknown): str is string => typeof str === 'string';\n\nexport const PersonForm: FC<Props> = ({ people, onSubmit }) => {\n  const usedNames = useMemo(() => people.map(p => p.name), [people]);\n  const usedGroups = useMemo(\n    () => [...new Set(people.map(p => p.group).filter(isString))],\n    [people]\n  );\n  const nameInput = useRef<null | HTMLInputElement>(null);\n\n  const validateName = (value: string) =>\n    value && !usedNames.includes(value) ? false : 'A unique name is required';\n\n  const instance = useForm<FormValues>({\n    defaultValues,\n    onSubmit: (values, instance) => {\n      onSubmit({\n        name: values.name,\n        ...(values.group && { group: values.group })\n      });\n\n      instance.reset();\n    }\n  });\n\n  const {\n    Form,\n    meta: { canSubmit, isTouched, isSubmitted },\n    getFieldMeta\n  } = instance;\n\n  useEffect(() => {\n    if (nameInput.current && isSubmitted && !isTouched) {\n      nameInput.current.focus();\n    }\n  }, [isSubmitted, isTouched]);\n\n  const nameField = getFieldMeta('name');\n\n  return (\n    <Form>\n      <fieldset>\n        <legend>Add a New Person</legend>\n        <label htmlFor=\"name\">Name</label>\n        <InputField\n          field=\"name\"\n          validate={validateName}\n          ref={nameInput}\n          type=\"text\"\n          required\n        />\n        <label htmlFor=\"group\">Group</label>\n        <SelectInputField field=\"group\" options={usedGroups} />\n        <button\n          type=\"submit\"\n          disabled={!canSubmit || (nameField && !nameField.isTouched)}\n        >\n          Submit\n        </button>\n      </fieldset>\n    </Form>\n  );\n};\n","import React, { Fragment, FC } from 'react';\nimport { Person } from 'gift-exchange';\n\n/*\n we need to key on something when rendering the list of groups,\n hopefully no user will ever enter this GUID...\n*/\nconst UNDEFINED_GROUP = 'fba449b5-deb3-400c-991c-4bac2bb1ad33';\n\ninterface PeopleListProps {\n  people: Person[];\n  removePerson: (person: Person) => void;\n}\nexport const PeopleList: FC<PeopleListProps> = ({ people, removePerson }) => {\n  const groups = people.reduce<\n    Array<{\n      group: string;\n      people: Person[];\n    }>\n  >((acc, person) => {\n    const group = acc.find(\n      item => item.group === (person.group || UNDEFINED_GROUP)\n    );\n    if (group) {\n      group.people.push(person);\n    } else {\n      acc.push({\n        group: person.group || UNDEFINED_GROUP,\n        people: [person]\n      });\n    }\n    return acc;\n  }, []);\n\n  return (\n    <dl>\n      {groups.map(group => (\n        <Fragment key={group.group}>\n          <dt>\n            {group.group === UNDEFINED_GROUP ? (\n              <strong>No Group</strong>\n            ) : (\n              group.group\n            )}\n          </dt>\n          {group.people.map(p => (\n            <dd key={p.name}>\n              {p.name}\n              <button onClick={() => removePerson(p)}>Remove</button>\n            </dd>\n          ))}\n        </Fragment>\n      ))}\n    </dl>\n  );\n};\n","import React, { FC } from 'react';\n\ninterface Props {\n  pairs: [string, string][];\n}\n\nexport const Pairs: FC<Props> = ({ pairs }) => {\n  return (\n    <div className=\"responsive-table\">\n      <table>\n        <caption>Secret Santa Matches</caption>\n        <thead>\n          <tr>\n            <th>Giver</th>\n            <th>Receiver</th>\n          </tr>\n        </thead>\n        <tbody>\n          {pairs.map(pair => (\n            <tr key={pair[0]}>\n              <td>{pair[0]}</td>\n              <td>{pair[1]}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import React, { FC, useLayoutEffect, useState } from 'react';\nimport { calculate, Person } from 'gift-exchange';\nimport { Pairs } from './pairs';\n\ninterface Props {\n  people: Person[];\n}\n\nexport const Matches: FC<Props> = ({ people }) => {\n  const [pairs, setPairs] = useState<[string, string][]>([]);\n  const [error, setError] = useState<null | Error>(null);\n\n  // needs to be a layout effect to prevent flashing when changing people\n  useLayoutEffect(() => {\n    setPairs([]);\n  }, [people]);\n\n  const calculateMatches = async () => {\n    try {\n      const m = await calculate(people);\n      setPairs(m.map((p, i) => [people[i].name, p.name]));\n    } catch (e) {\n      setError(e);\n      setPairs([]);\n    }\n  };\n\n  return (\n    <>\n      <button\n        onClick={() => {\n          setError(null);\n          calculateMatches();\n        }}\n        type=\"button\"\n        disabled={people.length < 1}\n      >\n        Match\n      </button>\n      {!error && pairs.length > 0 && <Pairs pairs={pairs} />}\n      {error && error.message}\n    </>\n  );\n};\n","import React, { FC, useState } from 'react';\nimport './App.css';\nimport { PersonForm } from './form/person-form';\nimport { PeopleList } from './people-list';\nimport { Person } from 'gift-exchange';\nimport { Matches } from './matches';\n\nconst App: FC = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n\n  const addPerson = (person: Person) => {\n    setPeople(prev => prev.concat(person));\n  };\n\n  const removePerson = (person: Person) => {\n    setPeople(prevPeople => prevPeople.filter(p => p.name !== person.name));\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Secret Santa</h1>\n      </header>\n      <main>\n        <PersonForm people={people} onSubmit={addPerson} />\n        <PeopleList people={people} removePerson={removePerson} />\n        <Matches people={people} />\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}