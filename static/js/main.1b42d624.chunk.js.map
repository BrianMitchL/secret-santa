{"version":3,"sources":["form/person-form.tsx","people-list.tsx","pairs.tsx","matches.tsx","App.tsx","index.tsx"],"names":["InputField","React","forwardRef","props","ref","splitFormProps","field","fieldOptions","rest","useField","meta","error","isTouched","isValidating","getInputProps","id","defaultValues","name","group","PersonForm","people","onSubmit","usedNames","useMemo","map","p","nameInput","useRef","validateName","value","includes","useForm","values","instance","reset","validate","Form","canSubmit","isSubmitted","useEffect","current","focus","htmlFor","type","required","disabled","UNDEFINED_GROUP","PeopleList","removePerson","groups","reduce","acc","person","find","item","push","key","onClick","Pairs","pairs","className","pair","Matches","useState","setPairs","setError","useLayoutEffect","calculateMatches","a","calculate","m","i","length","message","App","setPeople","prev","concat","prevPeople","filter","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1b42d624.chunk.js","sourcesContent":["import React, {\n  FC,\n  RefForwardingComponent,\n  useEffect,\n  useMemo,\n  useRef\n} from 'react';\nimport { useForm, useField, splitFormProps } from 'react-form';\nimport './form.css';\nimport { Person } from 'gift-exchange';\n\nconst InputField: RefForwardingComponent<\n  HTMLInputElement,\n  any\n> = React.forwardRef((props, ref) => {\n  const [field, fieldOptions, rest] = splitFormProps(props);\n\n  const {\n    meta: { error, isTouched, isValidating },\n    getInputProps\n  } = useField(field, fieldOptions);\n\n  return (\n    <>\n      <input id={field} {...getInputProps({ ref, ...rest })} />\n      {isValidating ? (\n        <em>Validating...</em>\n      ) : isTouched && error ? (\n        <em>{error}</em>\n      ) : null}\n    </>\n  );\n});\n\ntype FormValues = {\n  name: string;\n  group: string;\n};\n\nconst defaultValues: FormValues = {\n  name: '',\n  group: ''\n};\n\ninterface Props {\n  people: Person[];\n  onSubmit: (person: Person) => void;\n}\n\nexport const PersonForm: FC<Props> = ({ people, onSubmit }) => {\n  const usedNames = useMemo(() => people.map(p => p.name), [people]);\n  const nameInput = useRef<null | HTMLInputElement>(null);\n\n  const validateName = (value: string) =>\n    value && !usedNames.includes(value) ? null : 'A unique name is required';\n\n  const {\n    Form,\n    meta: { canSubmit, isTouched, isSubmitted }\n  } = useForm({\n    defaultValues,\n    onSubmit: (values: FormValues, instance: { reset: () => void }) => {\n      onSubmit({\n        name: values.name,\n        ...(values.group && { group: values.group })\n      });\n\n      instance.reset();\n    },\n    validate: (values: FormValues) => validateName(values.name)\n  });\n\n  useEffect(() => {\n    if (nameInput.current && isSubmitted && !isTouched) {\n      nameInput.current.focus();\n    }\n  }, [isSubmitted, isTouched]);\n\n  return (\n    <Form>\n      <fieldset>\n        <legend>Add a New Person</legend>\n        <label htmlFor=\"name\">Name</label>\n        <InputField\n          field=\"name\"\n          validate={validateName}\n          ref={nameInput}\n          type=\"text\"\n          required\n        />\n        <label htmlFor=\"group\">Group</label>\n        <InputField field=\"group\" type=\"text\" />\n        <button type=\"submit\" disabled={!canSubmit}>\n          Submit\n        </button>\n      </fieldset>\n    </Form>\n  );\n};\n","import React, { Fragment, FC } from 'react';\nimport { Person } from 'gift-exchange';\n\n/*\n we need to key on something when rendering the list of groups,\n hopefully no user will ever enter this GUID...\n*/\nconst UNDEFINED_GROUP = 'fba449b5-deb3-400c-991c-4bac2bb1ad33';\n\ninterface PeopleListProps {\n  people: Person[];\n  removePerson: (person: Person) => void;\n}\nexport const PeopleList: FC<PeopleListProps> = ({ people, removePerson }) => {\n  const groups = people.reduce<\n    Array<{\n      group: string;\n      people: Person[];\n    }>\n  >((acc, person) => {\n    const group = acc.find(\n      item => item.group === (person.group || UNDEFINED_GROUP)\n    );\n    if (group) {\n      group.people.push(person);\n    } else {\n      acc.push({\n        group: person.group || UNDEFINED_GROUP,\n        people: [person]\n      });\n    }\n    return acc;\n  }, []);\n\n  return (\n    <dl>\n      {groups.map(group => (\n        <Fragment key={group.group}>\n          <dt>\n            {group.group === UNDEFINED_GROUP ? (\n              <strong>No Group</strong>\n            ) : (\n              group.group\n            )}\n          </dt>\n          {group.people.map(p => (\n            <dd key={p.name}>\n              {p.name}\n              <button onClick={() => removePerson(p)}>Remove</button>\n            </dd>\n          ))}\n        </Fragment>\n      ))}\n    </dl>\n  );\n};\n","import React, { FC } from 'react';\n\ninterface Props {\n  pairs: [string, string][];\n}\n\nexport const Pairs: FC<Props> = ({ pairs }) => {\n  return (\n    <div className=\"responsive-table\">\n      <table>\n        <caption>Secret Santa Matches</caption>\n        <thead>\n          <tr>\n            <th>Giver</th>\n            <th>Receiver</th>\n          </tr>\n        </thead>\n        <tbody>\n          {pairs.map(pair => (\n            <tr key={pair[0]}>\n              <td>{pair[0]}</td>\n              <td>{pair[1]}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import React, { FC, useLayoutEffect, useState } from 'react';\nimport { calculate, Person } from 'gift-exchange';\nimport { Pairs } from './pairs';\n\ninterface Props {\n  people: Person[];\n}\n\nexport const Matches: FC<Props> = ({ people }) => {\n  const [pairs, setPairs] = useState<[string, string][]>([]);\n  const [error, setError] = useState<null | Error>(null);\n\n  // needs to be a layout effect to prevent flashing when changing people\n  useLayoutEffect(() => {\n    setPairs([]);\n  }, [people]);\n\n  const calculateMatches = async () => {\n    try {\n      const m = await calculate(people);\n      setPairs(m.map((p, i) => [people[i].name, p.name]));\n    } catch (e) {\n      setError(e);\n      setPairs([]);\n    }\n  };\n\n  return (\n    <>\n      <button\n        onClick={() => {\n          setError(null);\n          calculateMatches();\n        }}\n        type=\"button\"\n        disabled={people.length < 1}\n      >\n        Match\n      </button>\n      {!error && pairs.length > 0 && <Pairs pairs={pairs} />}\n      {error && error.message}\n    </>\n  );\n};\n","import React, { FC, useState } from 'react';\nimport './App.css';\nimport { PersonForm } from './form/person-form';\nimport { PeopleList } from './people-list';\nimport { Person } from 'gift-exchange';\nimport { Matches } from './matches';\n\nconst App: FC = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n\n  const addPerson = (person: Person) => {\n    setPeople(prev => prev.concat(person));\n  };\n\n  const removePerson = (person: Person) => {\n    setPeople(prevPeople => prevPeople.filter(p => p.name !== person.name));\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Secret Santa</h1>\n      </header>\n      <main>\n        <PersonForm people={people} onSubmit={addPerson} />\n        <PeopleList people={people} removePerson={removePerson} />\n        <Matches people={people} />\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}